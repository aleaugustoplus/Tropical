//---------------------------------------------------------------------------



#include "BTP_SocketServer.h"
//---------------------------------------------------------------------------

#include <windows.h>
#include <stdio.h>
// Pick a port number that seems to be away from all others
#define SERV_TCP_PORT	5554
#define MAXLINE			512	// Tamanho máximo da linha a ser editada pelo cliente


BTP_SocketServer::BTP_SocketServer(char*nome):BTP_Objeto(nome)
{
	WSADATA WsaData;


	struct	sockaddr_in serverAddress;
//	struct	sockaddr_in clientAddress;




	if (WSAStartup (0x0101, &WsaData) == SOCKET_ERROR)
	{
		printf("WSAStartup Failed");
		return ;
	}

	escuta = socket(AF_INET, SOCK_STREAM, 0);


	memset(&serverAddress, 0, sizeof(serverAddress));
	serverAddress.sin_family      = AF_INET;
	serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddress.sin_port        = htons(SERV_TCP_PORT);

	if (bind(escuta,
		(struct sockaddr *)&serverAddress,
		sizeof(serverAddress)
		) < 0)
		printf("bind() failed");

	 	// coverte socket em socket de escuta
	listen(escuta, 5);	// Máximo de 5 conexões simultaneas

	pKey = (ContextKey *)calloc(1, sizeof(struct ContextKey));
	pKey->sock = newsocket;
	// Cria evento com Reset Manual
	pKey->ovOut.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	// Seta flag no evento para que um packat não seja colocado
	// na fila da completion port quando uma operação de escrita
	// for completada
	pKey->ovOut.hEvent = (HANDLE)((DWORD)pKey->ovOut.hEvent | 0x1);

}
//---------------------------------------------------------------------------
BTP_SocketServer::~BTP_SocketServer()
{

}
//---------------------------------------------------------------------------
void __TROPICALL BTP_SocketServer::Objeto()
{

}
//---------------------------------------------------------------------------

